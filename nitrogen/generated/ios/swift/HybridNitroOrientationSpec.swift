///
/// HybridNitroOrientationSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridNitroOrientationSpec``
public protocol HybridNitroOrientationSpec_protocol: HybridObject {
  // Properties
  

  // Methods
  func getOrientation() throws -> String
  func getDeviceOrientation() throws -> String
  func lockToPortrait() throws -> Void
  func lockToPortraitUpsideDown() throws -> Void
  func lockToLandscape() throws -> Void
  func lockToLandscapeLeft() throws -> Void
  func lockToLandscapeRight() throws -> Void
  func unlockAllOrientations() throws -> Void
  func getAutoRotateState() throws -> Bool
}

/// See ``HybridNitroOrientationSpec``
open class HybridNitroOrientationSpec_base {
  private weak var cxxWrapper: HybridNitroOrientationSpec_cxx? = nil
  public init() { }
  public func getCxxWrapper() -> HybridNitroOrientationSpec_cxx {
  #if DEBUG
    guard self is HybridNitroOrientationSpec else {
      fatalError("`self` is not a `HybridNitroOrientationSpec`! Did you accidentally inherit from `HybridNitroOrientationSpec_base` instead of `HybridNitroOrientationSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridNitroOrientationSpec_cxx(self as! HybridNitroOrientationSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the NitroOrientation HybridObject.
 * Implement this protocol to create Swift-based instances of NitroOrientation.
 * ```swift
 * class HybridNitroOrientation : HybridNitroOrientationSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridNitroOrientationSpec = HybridNitroOrientationSpec_protocol & HybridNitroOrientationSpec_base
